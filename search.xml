<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分享 26 道烧脑的 JS 面试题，看看你能答对多少</title>
      <link href="/2021/11/12/%E5%88%86%E4%BA%AB%2026%20%E9%81%93%E7%83%A7%E8%84%91%E7%9A%84%20JS%20%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E7%9C%8B%E7%9C%8B%E4%BD%A0%E8%83%BD%E7%AD%94%E5%AF%B9%E5%A4%9A%E5%B0%91/%E6%BC%94%E7%A4%BA/"/>
      <url>/2021/11/12/%E5%88%86%E4%BA%AB%2026%20%E9%81%93%E7%83%A7%E8%84%91%E7%9A%84%20JS%20%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E7%9C%8B%E7%9C%8B%E4%BD%A0%E8%83%BD%E7%AD%94%E5%AF%B9%E5%A4%9A%E5%B0%91/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="分享-26-道烧脑的-JS-面试题，看看你能答对多少"><a href="#分享-26-道烧脑的-JS-面试题，看看你能答对多少" class="headerlink" title="分享 26 道烧脑的 JS 面试题，看看你能答对多少"></a>分享 26 道烧脑的 JS 面试题，看看你能答对多少</h1><hr><p>本文精选了20多道具有一定迷惑性的js题，主要考察的是类型判断、作用域、this指向、原型、事件循环等知识点，每道题都配有笔者详细傻瓜式的解析，偏向于初学者，大佬请随意。</p><h4 id="第-1题"><a href="#第-1题" class="headerlink" title="第 1题"></a><em>第 1题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = <span class="number">2</span></span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">b(a)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>2、1</p><p><em><strong>解析</strong></em></p><p>首先基本类型数据是按值传递的，所以执行b函数时，b的参数a接收的值为1，参数a相当于函数内部的变量，当本作用域有和上层作用域同名的变量时，无法访问到上层变量，所以函数内无论怎么修改a，都不影响上层，所以函数内部打印的a是2，外面打印的仍是1。</p><h4 id="第-2题"><a href="#第-2题" class="headerlink" title="第 2题"></a><em>第 2题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params">b = c, c = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b, c)</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>报错</p><p><em><strong>解析</strong></em></p><p>给函数多个参数设置默认值实际上跟按顺序定义变量一样，所以会存在暂时性死区的问题，即前面定义的变量不能引用后面还未定义的变量，而后面的可以访问前面的。</p><h4 id="第-3题"><a href="#第-3题" class="headerlink" title="第 3题"></a><em>第 3题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = b = <span class="number">10</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">let</span> a = b = <span class="number">20</span> </span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>10、20</p><p><em><strong>解析</strong></em></p><p>连等操作是从右向左执行的，相当于b = 10、let a = b，很明显b没有声明就直接赋值了，所以会隐式创建为一个全局变量，函数内的也是一样，并没有声明b，直接就对b赋值了，因为作用域链，会一层一层向上查找，找了到全局的b，所以全局的b就被修改为20了，而函数内的a因为重新声明了，所以只是局部变量，不影响全局的a，所以a还是10。</p><h4 id="第-4题"><a href="#第-4题" class="headerlink" title="第 4题"></a><em>第 4题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">a.x = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.x)</span><br><span class="line"><span class="built_in">console</span>.log(b.x)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>undefined、{n: 2}</p><p><em><strong>解析</strong></em></p><p>反正按照网上大部分的解释是因为.运算符优先级最高，所以会先执行a.x，此时a、b共同指向的{n: 1}变成了{n: 1, x: undefined}，然后按照连等操作从右到左执行代码，a = {n: 2}，显然，a现在指向了一个新对象，然后a.x = a，因为a.x最开始就执行过了，所以这里其实等价于：({n: 1, x: undefined}).x = b.x = a = {n: 2}。</p><h4 id="第-5题"><a href="#第-5题" class="headerlink" title="第 5题"></a><em>第 5题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">arr[<span class="number">10</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x === <span class="literal">undefined</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>[]</p><p><em><strong>解析</strong></em></p><p>这题比较简单，arr[10]=10，那么索引3到9位置上都是undefined，arr[3]等打印出来也确实是undefined，但是，这里其实涉及到ECMAScript版本不同对应方法行为不同的问题，ES6之前的遍历方法都会跳过数组未赋值过的位置，也就是空位，但是ES6新增的for of方法就不会跳过。</p><h4 id="第-6题"><a href="#第-6题" class="headerlink" title="第 6题"></a><em>第 6题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&#x27;Goodbye &#x27;</span> + name)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&#x27;Hello &#x27;</span> + name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>Goodbye Jack</p><p><em><strong>解析</strong></em></p><p>这道题考察的是变量提升的问题，var声明变量时会把变量自动提升到当前作用域顶部，所以函数内的name虽然是在if分支里声明的，但是也会提升到外层，因为和全局的变量name重名，所以访问不到外层的name，最后因为已声明未赋值的变量的值都为undefined，导致if的第一个分支满足条件。</p><h4 id="第-7题"><a href="#第-7题" class="headerlink" title="第 7题"></a><em>第 7题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="literal">NaN</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span> + <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="literal">undefined</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="literal">null</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + &#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + [])</span><br><span class="line"><span class="built_in">console</span>.log([] + &#123;&#125;)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>NaN、13、NaN、1、1[object Object]、1、[object Object]</p><p><em><strong>解析</strong></em></p><p>这道题考察的显然是+号的行为：</p><p>1.如果有一个操作数是字符串，那么把另一个操作数转成字符串执行连接</p><p>2.如果有一个操作数是对象，那么调用对象的valueOf方法转成原始值，如果没有该方法或调用后仍是非原始值，则调用toString方法</p><p>3.其他情况下，两个操作数都会被转成数字执行加法操作</p><h4 id="第-8题"><a href="#第-8题" class="headerlink" title="第 8题"></a><em>第 8题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;&#125;,</span><br><span class="line">    b=&#123;<span class="attr">key</span>:<span class="string">&#x27;b&#x27;</span>&#125;,</span><br><span class="line">    c=&#123;<span class="attr">key</span>:<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">a[b]=<span class="number">123</span></span><br><span class="line">a[c]=<span class="number">456</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b])</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>456</p><p><em><strong>解析</strong></em></p><p>对象有两种方法设置和引用属性，obj.name和obj[‘name’]，方括号里可以字符串、数字和变量设置是表达式等，但是最终计算出来得是一个字符串，对于上面的b和c，它们两个都是对象，所以会调用toString()方法转成字符串，对象转成字符串和数组不一样，和内容无关，结果都是[object Obejct]，所以a[b]=a[c]=a[‘[object Object]’]。</p><h4 id="第-9题"><a href="#第-9题" class="headerlink" title="第 9题"></a><em>第 9题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> out = <span class="number">25</span></span><br><span class="line"><span class="keyword">var</span> inner = &#123;</span><br><span class="line">  <span class="attr">out</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">func</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> out = <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.out</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log((inner.func, inner.func)())</span><br><span class="line"><span class="built_in">console</span>.log(inner.func())</span><br><span class="line"><span class="built_in">console</span>.log((inner.func)())</span><br><span class="line"><span class="built_in">console</span>.log((inner.func = inner.func)())</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>25、20、20、25</p><p><em><strong>解析</strong></em></p><p>这道题考察的是this指向问题：</p><p>1.逗号操作符会返回表达式中的最后一个值，这里为inner.func对应的函数，注意是函数本身，然后执行该函数，该函数并不是通过对象的方法调用，而是在全局环境下调用，所以this指向window，打印出来的当然是window下的out</p><p>2.这个显然是以对象的方法调用，那么this指向该对象</p><p>3.加了个括号，看起来有点迷惑人，但实际上(inner.func)和inner.func是完全相等的，所以还是作为对象的方法调用</p><p>4.赋值表达式和逗号表达式相似，都是返回的值本身，所以也相对于在全局环境下调用函数</p><h4 id="第-10题"><a href="#第-10题" class="headerlink" title="第 10题"></a><em>第 10题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a,b,c&#125; = &#123; <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">a</span>:<span class="number">1</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>1、2、3</p><p><em><strong>解析</strong></em></p><p>这题考察的是变量解构赋值的问题，数组解构赋值是按位置对应的，而对象只要变量与属性同名，顺序随意。</p><h4 id="第-11题"><a href="#第-11题" class="headerlink" title="第 11题"></a><em>第 11题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]))</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>[4, 5, 3]</p><p><em><strong>解析</strong></em></p><p>是不是从来没有用assign方法合并过数组？assign方法可以用于处理数组，不过会把数组视为对象，比如这里会把目标数组视为是属性为0、1、2的对象，所以源数组的0、1属性的值覆盖了目标对象的值。</p><h4 id="第-12题"><a href="#第-12题" class="headerlink" title="第 12题"></a><em>第 12题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span>(x++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>: ++x</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: ++x</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: ++x</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>4</p><p><em><strong>解析</strong></em></p><p>这题考查的是自增运算符的前缀版和后缀版，以及switch的语法，后缀版的自增运算符会在语句被求值后才发生，所以x会仍以1的值去匹配case分支，那么显然匹配到为1的分支，此时，x++生效，x变成2，再执行++x，变成3，因为没有break语句，所以会进入当前case后面的分支，所以再次++x，最终变成4。</p><h4 id="第-13题"><a href="#第-13题" class="headerlink" title="第 13题"></a><em>第 13题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span> == <span class="keyword">typeof</span> NULL)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; == <span class="keyword">typeof</span> <span class="class"><span class="keyword">class</span> </span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>true、true</p><p><em><strong>解析</strong></em></p><p>1.首先不要把NULL看成是null，js的关键字是区分大小写的，所以这就是一个普通的变量，而且没有声明，typeof对没有声明的变量使用是不会报错的，返回’undefined’，typeof对undefined使用也是’undefined’，所以两者相等</p><p>2.typeof对函数使用返回’function’，class只是es6新增的语法糖，本质上还是函数，所以两者相等</p><h4 id="第-14题"><a href="#第-14题" class="headerlink" title="第 14题"></a><em>第 14题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> count === <span class="string">&quot;number&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="keyword">typeof</span> count === <span class="string">&quot;number&quot;</span>)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>true、false</p><p><em><strong>解析</strong></em></p><p>1.没啥好说的，typeof对数字类型返回’number’。</p><p>2.这题考查的是运算符优先级的问题，逻辑非!的优先级比全等===高，所以先执行!!typeof count，结果为true，然后执行true === ‘number’，结果当然为false。</p><h4 id="第-15题"><a href="#第-15题" class="headerlink" title="第 15题"></a><em>第 15题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>2、2</p><p><em><strong>解析</strong></em></p><p>var声明会把变量提升到当前作用域顶部，所以a=1并不会报错，另外在全局作用域下使用var声明变量，该变量会变成window的一个属性，以上两点都和是否在严格模式下无关。</p><h4 id="第-16题"><a href="#第-16题" class="headerlink" title="第 16题"></a><em>第 16题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">2</span></span><br><span class="line">  b()</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>1</p><p><em><strong>解析</strong></em></p><p>这道题考察的是作用域的问题，作用域其实就是一套变量的查找规则，每个函数在执行时都会创建一个执行上下文，其中会关联一个变量对象，也就是它的作用域，上面保存着该函数能访问的所有变量，另外上下文中的代码在执行时还会创建一个作用域链，如果某个标识符在当前作用域中没有找到，会沿着外层作用域继续查找，直到最顶端的全局作用域，因为js是词法作用域，在写代码阶段就作用域就已经确定了，换句话说，是在函数定义的时候确定的，而不是执行的时候，所以a函数是在全局作用域中定义的，虽然在b函数内调用，但是它只能访问到全局的作用域而不能访问到b函数的作用域。</p><h4 id="第-17题"><a href="#第-17题" class="headerlink" title="第 17题"></a><em>第 17题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.name = <span class="string">&#x27;bcd&#x27;</span></span><br><span class="line">obj.fn()</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>undefined</p><p><em><strong>解析</strong></em></p><p>这道题考察的是this的指向问题，箭头函数执行的时候上下文是不会绑定this的，所以它里面的this取决于外层的this，这里函数执行的时候外层是全局作用域，所以this指向window，window对象下没有name属性，所以是undefined。</p><h4 id="第-18题"><a href="#第-18题" class="headerlink" title="第 18题"></a><em>第 18题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(obj, obj1))</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>{a: {b: 1}}</p><p><em><strong>解析</strong></em></p><p>这道题很简单，因为assign方法执行的是浅拷贝，所以源对象的a属性会直接覆盖目标对象的a属性。</p><h4 id="第-19题"><a href="#第-19题" class="headerlink" title="第 19题"></a><em>第 19题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> getNum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line">getNum()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>undefined、1、2</p><p><em><strong>解析</strong></em></p><p>首先因为var声明的变量提升作用，所以a变量被提升到顶部，未赋值，所以第一个打印出来的是undefined。</p><p>接下来是函数声明和函数表达式的区别，函数声明会有提升作用，在代码执行前就把函数提升到顶部，在执行上下文上中生成函数定义，所以第二个getNum会被最先提升到顶部，然后是var声明getNum的提升，但是因为getNum函数已经被声明了，所以就不需要再声明一个同名变量，接下来开始执行代码，执行到var getNum = fun…时，虽然声明被提前了，但是赋值操作还是留在这里，所以getNum被赋值为了一个函数，下面的函数声明直接跳过，最后，getNum函数执行前a打印出来还是1，执行后，a被修改成了2，所以最后打印出来的2。</p><h4 id="第-20题"><a href="#第-20题" class="headerlink" title="第 20题"></a><em>第 20题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">&#x27;global scope&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(scope)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">&#x27;local scope&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">a()()</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>undefined</p><p><em><strong>解析</strong></em></p><p>这题考查的还是变量提升和作用域的问题，虽然var声明是在return语句后面，但还是会提升到a函数作用域的顶部，然后又因为作用域是在函数定义的时候确定的，与调用位置无关，所以b的上层作用域是a函数，scope在b自身的作用域里没有找到，向上查找找到了自动提升的并且未赋值的scope变量，所以打印出undefined。</p><h4 id="第-21题"><a href="#第-21题" class="headerlink" title="第 21题"></a><em>第 21题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [fn]</span><br><span class="line">arr[<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>打印出arr数组本身</p><p><em><strong>解析</strong></em></p><p>函数作为某个对象的方法调用，this指向该对象，数组显然也是对象，只不过我们都习惯了对象引用属性的方法：obj.fn，但是实际上obj[‘fn’]引用也是可以的。</p><h4 id="第-22题"><a href="#第-22题" class="headerlink" title="第 22题"></a><em>第 22题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> b</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>1、b函数本身、b函数本身</p><p><em><strong>解析</strong></em></p><p>这三小题都涉及到函数声明和var声明，这两者都会发生提升，但是函数会优先提升，所以如果变量和函数同名的话，变量的提升就忽略了。</p><p>1.提升完后，执行到赋值代码，a被赋值成了1，函数因为已经声明提升了，所以跳过，最后打印a就是1。</p><p>2.和第一题类似，只是b没有赋值操作，那么执行到这两行相当于都没有操作，b当然是函数。</p><p>3.和第二题类似，只是先后顺序换了一下，但是并不影响两者的提升顺序，仍是函数优先，同名的var声明提升忽略，所以打印出b还是函数。</p><h4 id="第-23题"><a href="#第-23题" class="headerlink" title="第 23题"></a><em>第 23题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>) &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>) &#125;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">4</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">5</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请写出以下输出结果：</span></span><br><span class="line">Foo.getName()</span><br><span class="line">getName()</span><br><span class="line">Foo().getName()</span><br><span class="line">getName()</span><br><span class="line"><span class="keyword">new</span> Foo.getName()</span><br><span class="line"><span class="keyword">new</span> Foo().getName()</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName()</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>2、4、1、1、2、3、3</p><p><em><strong>解析</strong></em></p><p>这是一道综合性题目，首先getName函数声明会先提升，然后getName函数表达式提升，但是因为函数声明提升在线，所以忽略函数表达式的提升，然后开始执行代码，执行到var getName= …时，修改了getName的值，赋值成了打印4的新函数。</p><p>1.执行Foo函数的静态方法，打印出2。</p><p>2.执行getName，当前getName是打印出4的那个函数。</p><p>3.执行Foo函数，修改了全局变量getName，赋值成了打印1的函数，然后返回this，因为是在全局环境下执行，所以this指向window，因为getName已经被修改了，所以打印出1。</p><p>4.因为getName没有被重新赋值，所以再执行仍然打印出1。</p><p>5.new操作符是用来调用函数的，所以new Foo.getName()相当于new (Foo.getName)()，所以new的是Foo的静态方法getName，打印出2。</p><p>6.因为点运算符（.）的优先级和new是一样高的，所以从左往右执行，相当于(new Foo()).getName()，对Foo使用new调用会返回一个新创建的对象，然后执行该对象的getName方法，该对象本身并没有该方法，所以会从Foo的原型对象上查找，找到了，所以打印出3。</p><p>7.和上题一样，点运算符（.）的优先级和new一样高，另外new是用来调用函数的，所以new new Foo().getName()相当于new ((new Foo()).getName)()，括号里面的就是上一题，所以最后找到的是Foo原型上的方法，无论是直接调用，还是通过new调用，都会执行该方法，所以打印出3。</p><h4 id="第-24题"><a href="#第-24题" class="headerlink" title="第 24题"></a><em>第 24题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"> <span class="attr">address</span>: &#123;</span><br><span class="line">  <span class="attr">country</span>:<span class="string">&quot;china&quot;</span>,</span><br><span class="line">  <span class="attr">city</span>:<span class="string">&quot;hangzhou&quot;</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">say</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`it&#x27;s <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, from <span class="subst">$&#123;<span class="built_in">this</span>.address.country&#125;</span>`</span>)</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">setCountry</span>:<span class="function"><span class="keyword">function</span> (<span class="params">country</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.address.country=country</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">Object</span>.create(person)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="built_in">Object</span>.create(person)</span><br><span class="line"></span><br><span class="line">p1.name = <span class="string">&quot;Matthew&quot;</span></span><br><span class="line">p1.setCountry(<span class="string">&quot;American&quot;</span>)</span><br><span class="line"></span><br><span class="line">p2.name = <span class="string">&quot;Bob&quot;</span></span><br><span class="line">p2.setCountry(<span class="string">&quot;England&quot;</span>)</span><br><span class="line"></span><br><span class="line">p1.say()</span><br><span class="line">p2.say()</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>it’s Matthew, from England</p><p>it’s Bob, from England</p><p><em><strong>解析</strong></em></p><p>Object.create方法会创建一个对象，并且将该对象的__proto__属性指向传入的对象，所以p1和p2两个对象的原型对象指向了同一个对象，接着给p1添加了一个name属性，然后调用了p1的setCountry方法，p1本身是没有这个方法的，所以会沿着原型链进行查找，在它的原型上，也就是person对象上找到了这个方法，执行这个方法会给address对象的country属性设置传入的值，p1本身也是没有address属性的，但是和name属性不一样，address属性在原型对象上找到了，并且因为是个引用值，所以会成功修改它的country属性，接着对p2的操作也是一样，然后因为原型中存在引用值会在所有实例中共享，所以p1和p2它们引用的address也是同一个对象，一个实例修改了，会反映到所有实例上，所以p2的修改会覆盖p1的修改，最终country的值为England。</p><h4 id="第-25题"><a href="#第-25题" class="headerlink" title="第 25题"></a><em>第 25题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ ) &#123;</span><br><span class="line">    i == <span class="number">9999</span> &amp;&amp; resolve()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>2、3、5、4、1</p><p><em><strong>解析</strong></em></p><p>这道题显然考察的是事件循环的知识点。</p><p>js是一门单线程的语言，但是为了执行一些异步任务时不阻塞代码，以及避免等待期间的资源浪费，js存在事件循环的机制，单线程指的是执行js的线程，称作主线程，其他还有一些比如网络请求的线程、定时器的线程，主线程在运行时会产生执行栈，栈中的代码如果调用了异步api的话则会把事件添加到事件队列里，只要该异步任务有了结果便会把对应的回调放到【任务队列】里，当执行栈中的代码执行完毕后会去读取任务队列里的任务，放到主线程执行，当执行栈空了又会去检查，如此往复，也就是所谓的事件循环。</p><p>异步任务又分为【宏任务】（比如setTimeout、setInterval）和【微任务】（比如promise），它们分别会进入不同的队列，执行栈为空完后会优先检查微任务队列，如果有微任务的话会一次性执行完所有的微任务，然后去宏任务队列里检查，如果有则取出一个任务到主线程执行，执行完后又会去检查微任务队列，如此循环。</p><p>回到这题，首先整体代码作为一个宏任务开始执行，遇到setTimeout，相应回调会进入宏任务队列，然后是promise，promise的回调是同步代码，所以会打印出2，for循环结束后调用了resolve，所以then的回调会被放入微任务队列，然后打印出3，最后打印出5，到这里当前的执行栈就空了，那么先检查微任务队列，发现有一个任务，那么取出来放到主线程执行，打印出4，最后检查宏任务队列，把定时器的回调放入主线程执行，打印出1。</p><h4 id="第-26题"><a href="#第-26题" class="headerlink" title="第 26题"></a><em>第 26题</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;8&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">  &#125;) </span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em><strong>答案</strong></em></p><p>1、7、6、8、2、4、9、11、3、10、5、12</p><p><em><strong>解析</strong></em></p><p>这道题和上一题差不多，但是出现了process.nextTick，所以显然是在node环境下，node也存在事件循环的概念，但是和浏览器的有点不一样，nodejs中的宏任务被分成了几种不同的阶段，两个定时器属于timers阶段，setImmediate属于check阶段，socket的关闭事件属于close callbacks阶段，其他所有的宏任务都属于poll阶段，除此之外，只要执行到前面说的某个阶段，那么会执行完该阶段所有的任务，这一点和浏览器不一样，浏览器是每次取一个宏任务出来执行，执行完后就跑去检查微任务队列了，但是nodejs是来都来了，一次全部执行完该阶段的任务好了，那么process.nextTick和微任务在什么阶段执行呢，在前面说的每个阶段的后面都会执行，但是process.nextTick会优先于微任务，一图胜千言：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHpicYrciafd3U8o83thyl6lpgBSlmhTCIO0wVmrK8zBUEZgbYMaCErpOhfFPRlxuJ8MGGMf7gNU1zaA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>理解了以后再来分析这道题就很简单了，首先执行整体代码，先打印出1，setTimeout回调扔进timers队列，nextTick的扔进nextTick的队列，promise的回调是同步代码，执行后打印出7，then回调扔进微任务队列，然后又是一个setTimeout回调扔进timers队列，到这里当前节点就结束了，检查nextTick和微任务队列，nextTick队列有任务，执行后打印出6，微任务队列也有，打印出8，接下来按顺序检查各个阶段，check队列、close callbacks队列都没有任务，到了timers阶段，发现有两个任务，先执行第一个，打印出2，然后nextTick的扔进nextTick的队列，执行promise打印出4，then回调扔进微任务队列，再执行第二个setTimeout的回调，打印出9，然后和刚才一样，nextTick的扔进nextTick的队列，执行promise打印出11，then回调扔进微任务队列，到这里timers阶段也结束了，执行nextTick队列的任务，发现又两个任务，依次执行，打印出3和10，然后检查微任务队列，也是两个任务，依次执行，打印出5和12，到这里是有队列都清空了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FormData.get和set在IE浏览器和IE浏览器中均不起作用</title>
      <link href="/2021/11/10/FormData.get%E5%92%8Cset%E5%AF%B9%E4%BA%8EIE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7/%E6%BC%94%E7%A4%BA/"/>
      <url>/2021/11/10/FormData.get%E5%92%8Cset%E5%AF%B9%E4%BA%8EIE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="FormData-get和set在IE浏览器和IE浏览器中均不起作用"><a href="#FormData-get和set在IE浏览器和IE浏览器中均不起作用" class="headerlink" title="FormData.get和set在IE浏览器和IE浏览器中均不起作用"></a>FormData.get和set在IE浏览器和IE浏览器中均不起作用</h2><hr><p>使用FormData，它在chrome和firefox中运行良好，但在边缘浏览器中却无法正常运行，错误显示:该对象不接受属性或方法”获取”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> FormData($(<span class="string">&quot;#request-form&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(form.get(<span class="string">&quot;id_planta&quot;</span>))</span><br></pre></td></tr></table></figure><p>解决思路：</p><p>使用jQuery加上原生的form表单提交解决问题。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> FormData($(<span class="string">&quot;#request-form&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">var</span> planta = $(<span class="string">&quot;#request-form&quot;</span>).find(<span class="string">&quot;input[name=id_planta]&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(planta.val());</span><br></pre></td></tr></table></figure><p>但是这里要去注意一个问题，$(“#editFileForm”)[0] 是获取 id为editFileForm 的表单对象，但是有时候会遇到ie浏览器提交报错的情况，原因是，当FormData对象中最后一个input字段不选中或者不填写时，ie浏览器也会获取input的值会自动传递一个没有名称的值，这样和后台controller中的映射值不匹配，就直接进入ajax 的error方法，解决办法：<br>直接在form 的结尾加上一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;test&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p> 即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目:IE中地址栏直接改变路由页面不跳转bug</title>
      <link href="/2021/11/03/Vue%E9%A1%B9%E7%9B%AEIE%E4%B8%AD%E5%9C%B0%E5%9D%80%E6%A0%8F%E7%9B%B4%E6%8E%A5%E6%94%B9%E5%8F%98%E8%B7%AF%E7%94%B1%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%B7%B3%E8%BD%ACbug/%E6%BC%94%E7%A4%BA/"/>
      <url>/2021/11/03/Vue%E9%A1%B9%E7%9B%AEIE%E4%B8%AD%E5%9C%B0%E5%9D%80%E6%A0%8F%E7%9B%B4%E6%8E%A5%E6%94%B9%E5%8F%98%E8%B7%AF%E7%94%B1%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%B7%B3%E8%BD%ACbug/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue项目-IE11中地址栏直接改变路由页面不跳转bug"><a href="#Vue项目-IE11中地址栏直接改变路由页面不跳转bug" class="headerlink" title="Vue项目:IE11中地址栏直接改变路由页面不跳转bug"></a>Vue项目:IE11中地址栏直接改变路由页面不跳转bug</h2><hr><p>发现最近做的<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=vue">VUE</a>项目中，在IE浏览器下，当router改变时，虽然页面中的URL改变了，但页面并没有跳转。查阅资料后找到如下解决方案，在App.vue文件中的mounted里面添加如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkIE</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;-ms-scroll-limit&#x27;</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style &amp;&amp; <span class="string">&#x27;-ms-ime-align&#x27;</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (checkIE()) &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> currentPath = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.$route.path !== currentPath) &#123;</span><br><span class="line">            <span class="built_in">this</span>.$router.push(currentPath)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  调试后却没有效果，路由跳转后并没有触发hashchange事件。于是尝试将代码写到了main.js中，页面成功跳转了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="string">&quot;-ms-scroll-limit&quot;</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style &amp;&amp;</span><br><span class="line">      <span class="string">&quot;-ms-ime-align&quot;</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="built_in">window</span>.addEventListener(</span><br><span class="line">        <span class="string">&quot;hashchange&quot;</span>,</span><br><span class="line">        <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> currentPath = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.$route.path !== currentPath) &#123;</span><br><span class="line">            <span class="built_in">this</span>.$router.push(currentPath);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> createElement(App);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IE8及其以下版本兼容性问题之input file 隐藏上传文件</title>
      <link href="/2021/11/02/IE8%E5%8F%8A%E5%85%B6%E4%BB%A5%E4%B8%8B%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E4%B9%8Binput%20file/%E6%BC%94%E7%A4%BA/"/>
      <url>/2021/11/02/IE8%E5%8F%8A%E5%85%B6%E4%BB%A5%E4%B8%8B%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E4%B9%8Binput%20file/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="IE8及其以下版本兼容性问题之input-file-隐藏上传文件："><a href="#IE8及其以下版本兼容性问题之input-file-隐藏上传文件：" class="headerlink" title="IE8及其以下版本兼容性问题之input file 隐藏上传文件："></a>IE8及其以下版本兼容性问题之input file 隐藏上传文件：</h2><hr><p>文件上传时，默认的file标签很难看，而且每个浏览器下都有很大差距。因此我们基本都把真正的file标签给隐藏，然后创建一个标签来替代它。但是由于IE出于安全方面的考虑上传文件时必须点击file的浏览按钮选择文件才可以把文件上传上去。此时我们可以将file input透明化, 遮罩在自定义的button input 上面。这样用户看到的是我们自定义button的外观而实际上点击的还是file标签。</p><p>这样一来我们自定义的按钮存在又能真正点击到file标签，IE下就可以正常上传文件了。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modifyInfo_upload pr&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>上传头像<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;portrait&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upLoadPortrait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//css</span></span><br><span class="line">.modifyInfo_upload&#123;</span><br><span class="line"><span class="attr">height</span>: 30px;</span><br><span class="line">text-align: center;</span><br><span class="line">margin-bottom: 29px;</span><br><span class="line">&#125;</span><br><span class="line">.modifyInfo_upload span&#123;</span><br><span class="line"><span class="attr">height</span>: 30px;</span><br><span class="line">line-height: 30px;</span><br><span class="line">color: #1db69a;</span><br><span class="line">cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.modifyInfo_upload input&#123;</span><br><span class="line">    <span class="attr">width</span>: 58px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    opacity: <span class="number">0</span>;</span><br><span class="line">    -ms-filter:<span class="string">&quot;alpha(opacity=0)&quot;</span>;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 4px;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    right: <span class="number">0</span>;</span><br><span class="line">    margin: <span class="number">0</span> auto;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> portraitPath;</span><br><span class="line">$(<span class="string">&quot;#upLoadPortrait&quot;</span>).on(<span class="string">&#x27;change&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="built_in">this</span>).val() != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> strExtension = $(<span class="built_in">this</span>).val().substr($(<span class="built_in">this</span>).val().lastIndexOf(<span class="string">&#x27;.&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (strExtension != <span class="string">&#x27;jpg&#x27;</span> &amp;&amp; strExtension != <span class="string">&#x27;gif&#x27;</span> &amp;&amp; strExtension != <span class="string">&#x27;png&#x27;</span> &amp;&amp; strExtension != <span class="string">&#x27;bmp&#x27;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;请选择图片文件！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        portraitPath = $(<span class="built_in">this</span>).val();</span><br><span class="line">        <span class="built_in">console</span>.log(portraitPath);</span><br><span class="line">        $(<span class="string">&#x27;.modifyInfo_portrait img&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>,portraitPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IE、FireFox、Chrome浏览器中关于URL传参中文乱码，解决兼容性问题！</title>
      <link href="/2021/11/01/URL%E4%BC%A0%E5%8F%82%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E6%BC%94%E7%A4%BA/"/>
      <url>/2021/11/01/URL%E4%BC%A0%E5%8F%82%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="IE、FireFox、Chrome浏览器中关于URL传参中文乱码，解决兼容性问题！"><a href="#IE、FireFox、Chrome浏览器中关于URL传参中文乱码，解决兼容性问题！" class="headerlink" title="IE、FireFox、Chrome浏览器中关于URL传参中文乱码，解决兼容性问题！"></a>IE、FireFox、Chrome浏览器中关于URL传参中文乱码，解决兼容性问题！</h2><hr><p>前台用url传值中文，后台用request.getParameter接收参数。在Firefox，Chrome等浏览器中没有问题。但用IE浏览器就又会出现参数中文乱码现象。<br>IE、Firefox、Chrome浏览器对URL的处理各不相同，浏览器在传输URl时得对URL进行编码，IE默认是以UTF-8来传输 的，Firefox肯定不是以UTF-8来编码，有可能是以ISO-8859-1来编码的，而Chrome好像是采用的GBK来编码。<br>如果不对中文参数进行处理，那么中文字符经各个浏览器以自己的编码方式传输到服务器后就出现了各种编码方式，而服务器却只能以一种编码方式来对接收到的URL进行解码。这样的话和服务器使用的编码方式一样的浏览器在使用带中文的URl时不会出现问题，其他的浏览器则会出现问题。</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>我们可以在参数传递之前，我们自己先进行编码，在获取参数时，我们再进行解码。这样就可以得到我们想要的中文参数了，而且很好的处理了不同浏览器中兼容性问题！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newUrl = <span class="string">&quot;checkLogin/lessonClassList?userName=张三&quot;</span>;</span><br><span class="line">newUrl = <span class="built_in">encodeURI</span>(newUrl);<span class="comment">//编码</span></span><br><span class="line">$(<span class="string">&quot;#dg&quot;</span>).datagrid(<span class="string">&quot;options&quot;</span>).url=newUrl;</span><br><span class="line">$(<span class="string">&quot;#dg&quot;</span>).datagrid(<span class="string">&quot;reload&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Leftlet的入门指南</title>
      <link href="/2021/10/24/Leaflet%E7%9A%84%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/%E6%BC%94%E7%A4%BA/"/>
      <url>/2021/10/24/Leaflet%E7%9A%84%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Leaflet简述"><a href="#Leaflet简述" class="headerlink" title="Leaflet简述"></a>Leaflet简述</h2><p>Leaflet 是一个为建设交互性好适用于移动设备地图，而开发的现代的、开源的 JavaScript 库。代码仅有 33 KB，但它具有开发在线地图的大部分功能。Leaflet设计坚持简便、高性能和可用性好的哲学思想，在所有主要桌面和移动平台能高效运作，在现代浏览器上会利用HTML5和CSS3的优势，同时也支持旧的浏览器访问。支持插件扩展，有一个友好、易于使用的API文档和一个简单的、可读的源代码。Leaflet强大的开源库插件涉及到地图应用的各个方面包括地图服务，数据提供，数据格式，地理编码，路线和路线搜索，地图控件和交互等类型的插件共有140多个。</p><p>2016年9月27日—1.0leaflet,最快的,最稳定和严谨的leaflet,终于出来了!</p><p>leaflet是领先的开源JavaScript库为移动设备设计的互动地图。重33 KB的JS,所有映射大多数开发人员所需要的特性。</p><p>leaflet设计简单,性能和可用性。它有效地在所有主要的桌面和移动平台,可以扩展的插件,有一个美丽的,易于使用和证据确凿的API和一个简单的、易读的源代码,是一个快乐作出贡献。</p><h3 id="1、引入文件"><a href="#1、引入文件" class="headerlink" title="1、引入文件"></a>1、引入文件</h3><p>在文档的 head 部分引入 Leaflet CSS 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.css&quot;</span><br><span class="line">integrity=&quot;sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==&quot;crossorigin=&quot;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>在引入 Leaflet CSS 文件之后引入 Leaflet JavaScript 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.js&quot;</span><br><span class="line">   integrity=&quot;sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==&quot;crossorigin=&quot;&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2、为初始化地图做准备"><a href="#2、为初始化地图做准备" class="headerlink" title="2、为初始化地图做准备"></a>2、为初始化地图做准备</h3><p>将具有特定 id 的 div 元素放置在你希望地图所在的位置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;mapid&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>确保地图容器定义了固定高度，例如在 CSS 中设置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mapid &#123; height: 180px; &#125;</span><br></pre></td></tr></table></figure><h3 id="3、设置地图"><a href="#3、设置地图" class="headerlink" title="3、设置地图"></a>3、设置地图</h3><p>让我们用漂亮的 Mapbox Streets 瓦片（Tile）底图创建一张伦敦市中心的地图。首先，我们将初始化地图并将其视图设置为我们选择的地理坐标和缩放级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var mymap = L.map(&#x27;mapid&#x27;).setView([51.505, -0.09], 13); </span><br></pre></td></tr></table></figure><p>默认情况下（因为我们在创建地图实例时没有传递任何选项），地图上的所有鼠标和触摸交互都处于启用状态，并且具有缩放和属性控制。</p><p>请注意，setView 调用还会返回地图对象——大多数 Leaflet 方法在不返回显式值时的行为都是这样的，这允许你可以很方便的进行类似 jQuery 的链式调用。</p><p>接下来我们将添加一个瓦片（Tile）图层到地图中, 在当前示例中它是一个 Mapbox 街道的瓦片（Tile）图层。创建一个瓦片（Tile）图层通常会涉及为瓦片（Tile）图像设置 URL 模板 、属性文本和图层的最大缩放等级。在这个例子中，我们将使用 mapbox/streets-v11 中的 Mapbox’s Static Tiles API（从 Mapbox 中使用 瓦片（Tile），还必须申请一个访问令牌）。由于此 API 默认返回 512x512 图块（而不是 256x256），因此我们还必须明确指定这一点并将缩放值偏移 -1。</p><p>申请令牌的网址: <a href="https://account.mapbox.com/auth/signin/?route-to=%22https://account.mapbox.com/access-tokens/%22">https://account.mapbox.com/auth/signin/?route-to=%22https://account.mapbox.com/access-tokens/%22</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">L.tileLayer(</span><br><span class="line">    &#x27;https://api.mapbox.com/styles/v1/&#123;id&#125;/tiles/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;?access_token=&#123;accessToken&#125;&#x27;, </span><br><span class="line">&#123;</span><br><span class="line">    attribution: &#x27;Map data &amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors, Imagery © &lt;a href=&quot;https://www.mapbox.com/&quot;&gt;Mapbox&lt;/a&gt;&#x27;,</span><br><span class="line">    maxZoom: 18,</span><br><span class="line">    id: &#x27;mapbox/streets-v11&#x27;,</span><br><span class="line">    tileSize: 512,</span><br><span class="line">    zoomOffset: -1,</span><br><span class="line">    accessToken: &#x27;your.mapbox.access.token&#x27;</span><br><span class="line">&#125;).addTo(mymap);</span><br></pre></td></tr></table></figure><p>确保引入 leaflet.js 文件并配置好 div 后运行所有代码。就是这样，你现在拥有一个运行正常的 Leaflet 地图。</p><p>值得注意的是，Leaflet 是与供应商无关的，也就是说，它不会为瓦片（Tile）强制选择一个特定的提供方。你可以试着把 mapbox/streets-v11 替换成 mapbox/satellite-v9，然后看看会发生什么。另外，Leaflet 甚至不包含任何一行特定的提供者的代码，所以如果你需要，你可以自由地使用其他提供者（我们建议使用Mapbox，它看起来很美）。</p><p>根据版权声明，无论任何时候使用任何基于OpenStreetMap 的东西，署名都是必须的。大多数其他瓦片供应商（如Mapbox, Stamen或Thunderforest）也需要署名，请确保给予他们应有的荣誉。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>版本控制工具git</title>
      <link href="/2021/10/01/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7git/%E6%BC%94%E7%A4%BA/"/>
      <url>/2021/10/01/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7git/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>git 是一个分布式的版本管理工具，适用于多人开发团队进行代码的组织管理。</p><p>svn、hg、cvs 等</p><h3 id="代码管理工具"><a href="#代码管理工具" class="headerlink" title="代码管理工具"></a>代码管理工具</h3><pre><code>1、每天更新代码2、多人合并代码</code></pre><h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><pre><code>我们可以去官网下载 githttps://git-scm.com/downloads/安装完成后输入下面的命令</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git init#初始化仓库</span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br><span class="line">ls -ah#查看隐藏的git目录，我们的版本库信息都在这里，一般情况下不需要编辑</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大家可以把版本库，想象仓库。存储东西。</p><h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><p>创建好版本库之后，我们就可以对代码进行管理了。</p><p>常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .#添加文件</span><br><span class="line">$ git commit -m &quot;wrote a readme file&quot;#提交文件到版本库</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>做好版本管理很重要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git status #查看分支状态</span><br><span class="line">$ git reset --hard HEAD^#回到上一个版本，HEAD~100回到上100个版本</span><br><span class="line">$ git reset --hard id#回到指定的版本</span><br><span class="line">$ git reflog#查看git命令</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h3><pre><code>本地版本</code></pre><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><pre><code>操作 github 或者码云 gitee</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone http://github.com/sadsada</span><br><span class="line">$ git push</span><br><span class="line">$ git pull# git fetch &amp;&amp; git merge</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><pre><code>分支是很关键的哦</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev#创建分支</span><br><span class="line">$ git checkout dev #切换分支</span><br><span class="line">$ git branch -d dev   #删除分支</span><br><span class="line">$ git merge master #合并分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git  diff #查看冲突</span><br><span class="line">#手动操作文件解决冲突，提交</span><br><span class="line">$ git log --graph --pretty=oneline --abbrev-commit#查看分支合并情况</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>致自己</title>
      <link href="/2021/10/01/%E8%87%B4%E8%87%AA%E5%B7%B1/%E6%BC%94%E7%A4%BA/"/>
      <url>/2021/10/01/%E8%87%B4%E8%87%AA%E5%B7%B1/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="致自己"><a href="#致自己" class="headerlink" title="致自己"></a>致自己</h2><hr><p>　　别担心，一切都会好的</p><p>　　上天对每个人都是公平的，它在关上一扇门的同时，必定会打开一扇窗;无论多么糟糕的东西，世界都为其预留了位置。相信雨点不会仅仅落在你一个人的屋顶之上，相信你自己，大千世界总有属于你的角落;拥有积极乐观的态度，是解决和战胜任何困难的第一步。</p><p>　　别害怕，天是不会塌的</p><p>　　只要下定决心克服恐惧，便几乎能克服任何恐惧。害怕时，把心思放在必须做的事情上，如果曾经彻底准备，便不会害怕;去做你害怕的事，害怕自然就会消失。人生就像「碰钉子」，碰一回钉子，长一分见识，增一分阅历;天塌下来，还有大汉撑着，体验一次吧!人的整个生命其实就是一场体验。</p><p>　　别后悔，谁都会做错事</p><p>　　世界上没有永远不犯错误的人，做错事，千万别后悔。后悔是一种耗费精神的情绪，后悔是比损失更大的损失，比错误更大的错误。要勇敢地去做，不要害怕出错，没什么大不了的;坦白地说，有许多人希望你会被自己的错误所击败。每一种创伤都是一种成熟</p><p>　　别伤心，生活是美好的</p><p>　　在短暂的人生岁月中，谁都会碰到生离死别的揪心事。伤心和委屈的时候，可以哭，哭完洗把脸，拍拍自己的脸，给自己一个微笑，不要揉眼睛，否则第二天早上眼睛会肿。好好生活，你的生命由你自己作主!</p><p>　　别失望，机会还会有的</p><p>　　人之所以能，是相信能。一个人最大的破产是绝望，最大的资产是希望。生活很多时候是会有很多不公平的，不要抱怨，要努力地去适应它。创造机会的人是勇者，等待机会的人是愚者;如果天上会掉馅饼，那也会掉在把头昂起来的人嘴里。人生充满了尝试与错误，一次失败不代表你就出局了。</p><p>　　别放弃，坚持就有希望</p><p>　　人生最遗憾的，莫过于轻易地放弃了不该放弃的。你可以不拥有任何东西，除了对生活的激情和对未来的希望。人生只有一条路不能选择，那就是放弃的路;只有一条路不能拒绝，那就是成长的路。伟人之所以伟大，是因为他与别人共处逆境时，别人失去了信心，他却下决心实现自己的目标。希望总是出现在绝望之时!</p><p>　　别勉强，顺其自然就好</p><p>　　生活中有许多事，可能你经过再多的努力都无法达到，因为一个人的能力必定有限，要受各种条件的限制，只要自己努力过、争取过，其实结果已经不重要了;有些事，实在办不到，就算了吧，千万别为难自己。</p><p>　　别生气，学会宽宏大量</p><p>　　生活中总会有伤害你的人，你千万别生气。生气是拿别人的错误来惩罚自己;忍一忍风平浪静、退一步海阔天空。好脾气是一个人在社交中所能穿着的最佳服饰，宽容是人与人相互理解和信任的桥梁;乐观的心态来自宽容，来自大度，来自善解人意，来自与世无争。</p><p>　　上天对每个人都是公平的，它在关上一扇门的同时，必定会打开一扇窗;无论多么糟糕的东西，世界都为其预留了位置。相信雨点不会仅仅落在你一个人的屋顶之上，相信你自己，大千世界总有属于你的角落;拥有积极乐观的态度，是解决和战胜任何困难的第一步。</p><p>　　别害怕，天是不会塌的</p><p>　　只要下定决心克服恐惧，便几乎能克服任何恐惧。害怕时，把心思放在必须做的事情上，如果曾经彻底准备，便不会害怕;去做你害怕的事，害怕自然就会消失。人生就像「碰钉子」，碰一回钉子，长一分见识，增一分阅历;天塌下来，还有大汉撑着，体验一次吧!人的整个生命其实就是一场体验。</p><p>　　别后悔，谁都会做错事</p><p>　　世界上没有永远不犯错误的人，做错事，千万别后悔。后悔是一种耗费精神的情绪，后悔是比损失更大的损失，比错误更大的错误。要勇敢地去做，不要害怕出错，没什么大不了的;坦白地说，有许多人希望你会被自己的错误所击败。每一种创伤都是一种成熟</p><p>　　别伤心，生活是美好的</p><p>　　在短暂的人生岁月中，谁都会碰到生离死别的揪心事。伤心和委屈的时候，可以哭，哭完洗把脸，拍拍自己的脸，给自己一个微笑，不要揉眼睛，否则第二天早上眼睛会肿。好好生活，你的生命由你自己作主!</p><p>　　别失望，机会还会有的</p><p>　　人之所以能，是相信能。一个人最大的破产是绝望，最大的资产是希望。生活很多时候是会有很多不公平的，不要抱怨，要努力地去适应它。创造机会的人是勇者，等待机会的人是愚者;如果天上会掉馅饼，那也会掉在把头昂起来的人嘴里。人生充满了尝试与错误，一次失败不代表你就出局了。</p><p>　　别放弃，坚持就有希望</p><p>　　人生最遗憾的，莫过于轻易地放弃了不该放弃的。你可以不拥有任何东西，除了对生活的激情和对未来的希望。人生只有一条路不能选择，那就是放弃的路;只有一条路不能拒绝，那就是成长的路。伟人之所以伟大，是因为他与别人共处逆境时，别人失去了信心，他却下决心实现自己的目标。希望总是出现在绝望之时!</p><p>　　别勉强，顺其自然就好</p><p>　　生活中有许多事，可能你经过再多的努力都无法达到，因为一个人的能力必定有限，要受各种条件的限制，只要自己努力过、争取过，其实结果已经不重要了;有些事，实在办不到，就算了吧，千万别为难自己。</p><p>　　别生气，学会宽宏大量</p><p>　　生活中总会有伤害你的人，你千万别生气。生气是拿别人的错误来惩罚自己;忍一忍风平浪静、退一步海阔天空。好脾气是一个人在社交中所能穿着的最佳服饰，宽容是人与人相互理解和信任的桥梁;乐观的心态来自宽容，来自大度，来自善解人意，来自与世无争。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
